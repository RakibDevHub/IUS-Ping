-- Full-privilege user (but restricted to specific tables)
CREATE USER ius_admin IDENTIFIED BY admin123;
GRANT CONNECT TO ius_admin;
ALTER USER ius_admin QUOTA UNLIMITED ON SYSTEM;

-- Restricted user for general operations
CREATE USER ius_user IDENTIFIED BY user123;
GRANT CONNECT TO ius_user;
ALTER USER ius_user QUOTA UNLIMITED ON SYSTEM;

-- Tables under ius_admin
CREATE TABLE ius_admin.admin (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR2(100) UNIQUE NOT NULL,
    password VARCHAR2(255) NOT NULL
);

CREATE TABLE ius_admin.teacher (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    department VARCHAR2(100) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    password VARCHAR2(255) NOT NULL
);

CREATE TABLE ius_admin.student (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    student_id VARCHAR2(50) UNIQUE NOT NULL,
    name VARCHAR2(100) NOT NULL,
    department VARCHAR2(100) NOT NULL,
    batch VARCHAR2(50) NOT NULL,
    phone_number VARCHAR2(20) NOT NULL,
    password VARCHAR2(255) NOT NULL,
    status VARCHAR2(20) DEFAULT 'Pending' NOT NULL
);

-- Create a View for Student List (Hides Phone Number)
CREATE OR REPLACE VIEW ius_admin.student_list_view AS
SELECT id, student_id, name, department, batch, password, status FROM ius_admin.student;

-- Granting ius_user access to the student list view
GRANT SELECT, UPDATE(student_id, name, department, batch, password, status), DELETE ON ius_admin.student_list_view TO ius_user;

-- Trigger for Student Status Updates (When admin or teacher updates student status)
CREATE OR REPLACE TRIGGER ius_admin.update_student
INSTEAD OF UPDATE ON ius_admin.student_list_view
FOR EACH ROW
BEGIN    
    UPDATE 
        ius_admin.student
    SET 
        student_id = NVL(:NEW.student_id, :OLD.student_id),
        name = NVL(:NEW.name, :OLD.name),
        batch = NVL(:NEW.batch, :OLD.batch),
        department = NVL(:NEW.department, :OLD.department),
        password = NVL(:NEW.password, :OLD.password),
        status = NVL(:NEW.status, :OLD.status)
    WHERE 
        id = :OLD.id;    
END;
/

-- Access to admin and teacher tables for ius_user
GRANT SELECT ON ius_admin.admin TO ius_user;
GRANT INSERT, SELECT, UPDATE, DELETE ON ius_admin.teacher TO ius_user;
GRANT INSERT, DELETE ON ius_admin.student TO ius_user;

REVOKE DELETE ON ius_admin.student FROM ius_user;

